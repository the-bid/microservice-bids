// Code generated by Prisma (prisma@1.26.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  bid: (where?: BidWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bid: (where: BidWhereUniqueInput) => BidPromise;
  bids: (args?: {
    where?: BidWhereInput;
    orderBy?: BidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bid>;
  bidsConnection: (args?: {
    where?: BidWhereInput;
    orderBy?: BidOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BidConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBid: (data: BidCreateInput) => BidPromise;
  updateBid: (args: {
    data: BidUpdateInput;
    where: BidWhereUniqueInput;
  }) => BidPromise;
  updateManyBids: (args: {
    data: BidUpdateManyMutationInput;
    where?: BidWhereInput;
  }) => BatchPayloadPromise;
  upsertBid: (args: {
    where: BidWhereUniqueInput;
    create: BidCreateInput;
    update: BidUpdateInput;
  }) => BidPromise;
  deleteBid: (where: BidWhereUniqueInput) => BidPromise;
  deleteManyBids: (where?: BidWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bid: (
    where?: BidSubscriptionWhereInput
  ) => BidSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BidOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "auctionId_ASC"
  | "auctionId_DESC"
  | "teamId_ASC"
  | "teamId_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface BidCreateInput {
  userId: String;
  auctionId: String;
  teamId: String;
  amount: Float;
}

export interface BidWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  userId?: String;
  userId_not?: String;
  userId_in?: String[] | String;
  userId_not_in?: String[] | String;
  userId_lt?: String;
  userId_lte?: String;
  userId_gt?: String;
  userId_gte?: String;
  userId_contains?: String;
  userId_not_contains?: String;
  userId_starts_with?: String;
  userId_not_starts_with?: String;
  userId_ends_with?: String;
  userId_not_ends_with?: String;
  auctionId?: String;
  auctionId_not?: String;
  auctionId_in?: String[] | String;
  auctionId_not_in?: String[] | String;
  auctionId_lt?: String;
  auctionId_lte?: String;
  auctionId_gt?: String;
  auctionId_gte?: String;
  auctionId_contains?: String;
  auctionId_not_contains?: String;
  auctionId_starts_with?: String;
  auctionId_not_starts_with?: String;
  auctionId_ends_with?: String;
  auctionId_not_ends_with?: String;
  teamId?: String;
  teamId_not?: String;
  teamId_in?: String[] | String;
  teamId_not_in?: String[] | String;
  teamId_lt?: String;
  teamId_lte?: String;
  teamId_gt?: String;
  teamId_gte?: String;
  teamId_contains?: String;
  teamId_not_contains?: String;
  teamId_starts_with?: String;
  teamId_not_starts_with?: String;
  teamId_ends_with?: String;
  teamId_not_ends_with?: String;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  AND?: BidWhereInput[] | BidWhereInput;
  OR?: BidWhereInput[] | BidWhereInput;
  NOT?: BidWhereInput[] | BidWhereInput;
}

export interface BidUpdateInput {
  userId?: String;
  auctionId?: String;
  teamId?: String;
  amount?: Float;
}

export interface BidUpdateManyMutationInput {
  userId?: String;
  auctionId?: String;
  teamId?: String;
  amount?: Float;
}

export interface BidSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BidWhereInput;
  AND?: BidSubscriptionWhereInput[] | BidSubscriptionWhereInput;
  OR?: BidSubscriptionWhereInput[] | BidSubscriptionWhereInput;
  NOT?: BidSubscriptionWhereInput[] | BidSubscriptionWhereInput;
}

export type BidWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface BidEdge {
  node: Bid;
  cursor: String;
}

export interface BidEdgePromise extends Promise<BidEdge>, Fragmentable {
  node: <T = BidPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BidEdgeSubscription
  extends Promise<AsyncIterator<BidEdge>>,
    Fragmentable {
  node: <T = BidSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BidPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  userId: String;
  auctionId: String;
  teamId: String;
  amount: Float;
}

export interface BidPreviousValuesPromise
  extends Promise<BidPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
  auctionId: () => Promise<String>;
  teamId: () => Promise<String>;
  amount: () => Promise<Float>;
}

export interface BidPreviousValuesSubscription
  extends Promise<AsyncIterator<BidPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<String>>;
  auctionId: () => Promise<AsyncIterator<String>>;
  teamId: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBid {
  count: Int;
}

export interface AggregateBidPromise
  extends Promise<AggregateBid>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBidSubscription
  extends Promise<AsyncIterator<AggregateBid>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Bid {
  id: ID_Output;
  createdAt: DateTimeOutput;
  userId: String;
  auctionId: String;
  teamId: String;
  amount: Float;
}

export interface BidPromise extends Promise<Bid>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  userId: () => Promise<String>;
  auctionId: () => Promise<String>;
  teamId: () => Promise<String>;
  amount: () => Promise<Float>;
}

export interface BidSubscription
  extends Promise<AsyncIterator<Bid>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<String>>;
  auctionId: () => Promise<AsyncIterator<String>>;
  teamId: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface BidSubscriptionPayload {
  mutation: MutationType;
  node: Bid;
  updatedFields: String[];
  previousValues: BidPreviousValues;
}

export interface BidSubscriptionPayloadPromise
  extends Promise<BidSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BidPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BidPreviousValuesPromise>() => T;
}

export interface BidSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BidSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BidSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BidPreviousValuesSubscription>() => T;
}

export interface BidConnection {
  pageInfo: PageInfo;
  edges: BidEdge[];
}

export interface BidConnectionPromise
  extends Promise<BidConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BidEdge>>() => T;
  aggregate: <T = AggregateBidPromise>() => T;
}

export interface BidConnectionSubscription
  extends Promise<AsyncIterator<BidConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BidEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBidSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Bid",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
